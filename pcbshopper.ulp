/**
 * @file pcbshopper.ulp
 * @brief Automatically parse PCB and submit for quote on PCBshopper.com
 *
 * @author Jeremy Ruhland <jeremy ( a t ) goopypanther.org>
 * @license (C) Jeremy Ruhland 2016 under GPL3
 *
 */
 
#usage "<b>PCBshopper Quote Helper</b>"
       "<p>"
       "Automatically submit quotes to PCBshopper.com"
       "<p>"
       "<author>Author: Jeremy Ruhland</author>"
       
#require 5.1000
string Version = "1";


// Typedefs
enum {
    false = 0,
    true  = 1
};

// Dimention units
enum {
    inches = 0,
    cm     = 1,
    mm     = 2
};

// Silkscreen
enum {
    no     = 0,
    top    = 1,
    bottom = 2,
    both   = 3
};


// Global variables
char skipDrcExport;
string druFilePath;
string paramWarnings;

// Params for API
real pcbShopperWidth; // Board width
real pcbShopperHeight; // Board height
char pcbShopperUnits; // Dim measurement units
int pcbShopperLayers; // Board layers
// Solder mask color, unimplemented, no good way to get data from eagle
char pcbShopperSilkscreen; // Silkscreen number
// Copper finish type, unimplemented
int pcbShopperCu; // Outer layer copper thickness
real pcbShopperTrace; // Min trace thickness
char pcbShopperTwUnits; // Trace thickness units
real pcbShopperDrill; // Min drill size
char pcbShopperDrillUnits; // Drill size units
int pcbShopperFingers; // Number of hard gold finish parts
// Stencil, unimplemented
// Quality, unimplemented
// Designs, unimplemented, assumed 1
// Country, unimplemented, assumed US
// Days, unimplemented, assumed default


// Functions

/**
 * Calculate PCB parameters required for quote
 * TODO
 */
void calculateParams(void) {
    char tStop = false;
    char bStop = false;
    char tSilk = false;
    char bSilk = false;
    char tFinish = false;
    char bFinish = false;
    
    // Check layer usage
    board(B) { // Create board context for layer usage check
        B.layers(L) { // Loop following through each layer
            // Count each copper layer used
            if (L.number <= 16) {
                pcbShopperLayers++;
            // Catch stop layers, top/bottom
            } else if (L.number == LAYER_TSTOP) {
                tStop = TRUE;
            } else if (L.number == LAYER_BSTOP) {
                bStop = TRUE;
            // Catch silk layers, tPlace/_tSilk
            } else if ((L.number == LAYER_TPLACE) || (L.number == 121)) {
                tSilk = TRUE;
        }
    }
    
    // Measure board dims from outline
    // Or from outer layers
    
    // Find minimum trace width
    
    // Pull params out of DRU
    
    // Check hole sizes
    
    // Check for unrouted nets
    
    // Count SMD pads
}


/**
 * Draw dialog with quote information
 * TODO
 */
void drawDialog(void) {

}


/**
 * Main function executed from here
 */

// Parse arguments & search for state indicator
skipDrcExport = false;
for (int i = 1; i <= argc; i++) {
    if (argv[i] == "-skipDrcExport") {
        skipDrcExport = true;
    } else {}
}

// Check we are in layout editor...
if (board) {
    // Export board design rules to temp file unless specified by runtime flag
    if (skipDrcExport == false) {
        board(B) { // Create context
            // Generate file path for new temp dru file
            druFilePath = filedir(argv[0]) + "pcbshpr-" + filename(filesetext(B.name, ".dru"));

            // Save drc file, re-run script with new directive
            exit("DRC SAVE '" + druFilePath + "';\nRUN '" + argv[0] + "' -skipDrcExport;");
        }
    } else {
    // If dru already exported in previous run
        status("Identifying PCB design constraints...");
        calculateParams(); // Check PCB for all relevant design constraints
        
        // Check if any warnings were generated during param calcs
        if (paramWarnings) {
            // Generate warning string for display
            paramWarnings = "<b>Warnings generated during param calcs:</b> <ul>" + paramWarnings + "</ul>";
        } else {}

        drawDialog(); // Display info dialog with params

        exit(EXIT_SUCCESS);
	}
// If we are not in layout editor...
} else {
    // Popup warning
    dlgMessageBox("This script must be run from layout editor.");
}
